{
  parserClass="org.idea_sp.parser.SourcePawnParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"
  extends(".*_expr")=expr

//XXX######################################################################################
//  consumeTokenMethod(".*_expr|expr")="consumeTokenFast"

  psiClassPrefix="SourcePawn"
  psiImplClassSuffix="Impl"
  psiPackage="org.idea_sp.psi"
  psiImplPackage="org.idea_sp.psi.impl"

  elementTypeHolderClass="org.idea_sp.psi.SourcePawnTypes"
  elementTypeClass="org.idea_sp.psi.SourcePawnElementType"
  tokenTypeClass="org.idea_sp.psi.SourcePawnTokenType"

  tokens = [
    EQ="="
    EXCL="!"
    TILDE="~"
    QUEST="?"
    COLON=":"
    COLONCOLON="::"
    PLUS="+"
    MINUS="-"
    ASTERISK="*"
    DIV="/"
    OR="|"
    XOR="^"
    PERC="%"
    LPAREN="("
    RPAREN=")"
    LBRACE="{"
    RBRACE="}"
    LBRACKET="["
    RBRACKET="]"
    SEMICOLON=";"
    COMMA=","
    ELLIPSIS="..."
    DOT="."
    EQEQ="=="
    NE="!="
    OROR="||"
    PLUSPLUS="++"
    MINUSMINUS="--"
    LT="<"
    LE="<="
    LTLT="<<"
    GT=">"
    AND="&"
    ANDAND="&&"
    PLUSEQ="+="
    MINUSEQ="-="
    ASTERISKEQ="*="
    DIVEQ="/="
    ANDEQ="&="
    OREQ="|="
    XOREQ="^="
    PERCEQ="%="
    LTLTEQ="<<="
    GTGTEQ=">>="
    UNDERSCORE="_"

    ASSERT_KEYWORD="assert"
    BREAK_KEYWORD="break"
    CASE_KEYWORD="case"
    CONTINUE_KEYWORD="continue"
    DEFAULT_KEYWORD="default"
    DO_KEYWORD="do"
    ELSE_KEYWORD="else"
    EXIT_KEYWORD="exit"
    FOR_KEYWORD="for"
    GOTO_KEYWORD="goto"
    IF_KEYWORD="if"
    RETURN_KEYWORD="return"
    SLEEP_KEYWORD="sleep"
    STATE_KEYWORD="state"
    SWITCH_KEYWORD="switch"
    WHILE_KEYWORD="while"
    USING_KEYWORD="using"

    DEFINED_KEYWORD="defined"
    SIZEOF_KEYWORD="sizeof"
    STATE_KEYWORD="state"
    TAGOF_KEYWORD="tagof"

    CONST_KEYWORD="const"
    FORWARD_KEYWORD="forward"
    NATIVE_KEYWORD="native"
    OPERATOR_KEYWORD="operator"
    PUBLIC_KEYWORD="public"
    STATIC_KEYWORD="static"
    STOCK_KEYWORD="stock"

    DECL_KEYWORD="decl"
    NEW_KEYWORD="new"
    DELETE_KEYWORD="delete"
    PUBLIC_KEYWORD="public"

    TRUE_KEYWORD="true"
    FALSE_KEYWORD="false"
    NULL_KEYWORD="null"

    // SourcePawn-specific keywords
    ENUM_KEYWORD="enum"
    STRUCT_KEYWORD="struct"
    METHODMAP_KEYWORD="methodmap"
    PROPERTY_KEYWORD="property"
    TYPEDEF_KEYWORD="typedef"
    TYPESET_KEYWORD="typeset"

    VIEW_AS_KEYWORD="view_as"

    ANY_TYPE="any"
    VOID_TYPE="void"
    INT_TYPE="int"
    FLOAT_TYPE="float"
    CHAR_TYPE="char"
    BOOL_TYPE="bool"
    FUNCTION_TYPE="function"

    line_comment="regexp://[^\r\n]*"
    doc_comment="regexp:/\*\*(.|\n)*?\*/"
    block_comment="regexp:/\*(.|\n)*?\*/"
    preprocessor_comment="regexp:#(assert|define|else|elseif|endif|endinput|error|file|if|include|line|pragma|section|tryinclude|undef)[^\r\n]*"

    integer_literal="regexp:(\b[-+])?\d[_\d]*"
    float_literal="regexp:(\b[-+])?\d[_\d]*\.\d[_\d]*(e[-+]?\d+)?"
    hex_literal="regexp:(\b[-+])?0x[a-fA-F0-9_]+"
    binary_literal="regexp:(\b[-+])?0b[01_]+"

    string_literal="regexp:\"(\\.|[^\"])*\""
    character_literal="regexp:'(\\.|[^'])'"

    // @ and _ are not themselves valid identifiers.
    identifier="regexp:([@_a-zA-Z][@_a-zA-Z0-9]+|[a-zA-Z][@_a-zA-Z0-9]*)"

    symbol="regexp:([@_a-zA-Z][@_a-zA-Z0-9]+|[a-zA-Z][@_a-zA-Z0-9]*)"

    EOL="regexp:\r|\n|\r\n"
    // TODO: remove me (for live preview purposes only)
    SPACE="regexp:[ \n\r\t\f]"
  ]

  implements("global_var_decl|func_decl|methodmap|methodmap_method|methodmap_prop|typedef|typedef_param_decl|typeset|struct_decl|struct_field|enum_struct_decl|enum_struct_field|enum_struct_method|func|param_decl|enum_decl|enum_item|local_decl_item")="org.idea_sp.psi.SourcePawnNamedElement"
  mixin("global_var_decl|func_decl|methodmap|methodmap_method|methodmap_prop|typedef|typedef_param_decl|typeset|struct_decl|struct_field|enum_struct_decl|enum_struct_field|enum_struct_method|func|param_decl|enum_decl|enum_item|local_decl_item")="org.idea_sp.psi.impl.SourcePawnNamedElementImpl"
  generateTokenAccessors="no"
}

private root ::= global*

private meta list ::= <<param>> ( COMMA <<param>> )*
private meta list_maybe_trailing_comma ::= <<list <<param>>>> COMMA?

private global ::= global_var_decl_statement
                 | func_decl
                 | using_stmt
                 | methodmap
                 | typedef
                 | typeset SEMICOLON?
                 | struct_decl SEMICOLON?
                 | enum_struct_decl SEMICOLON?
                 | enum_decl SEMICOLON?
                 | func

global_var_decl_statement ::= global_var_decl SEMICOLON
                            | global_var_decl EQ global_var_initializer SEMICOLON
                            | new_var_decl SEMICOLON

global_var_decl ::= global_var_storage_class? CONST_KEYWORD? (tags | type_expression) identifier old_dims?
global_var_storage_class ::= STATIC_KEYWORD | PUBLIC_KEYWORD
global_var_initializer ::= struct_literal | expr

new_var_decl ::= NEW_KEYWORD tags? identifier old_dims?

type_expression ::= type type_dims { pin = 1 }
private type ::= (builtin_type | symbol)
private type_dims ::= (LBRACKET RBRACKET)*
private old_dims ::= (LBRACKET expr? RBRACKET)+
private def_dims ::= (LBRACKET expr RBRACKET)+

private builtin_type ::= ANY_TYPE
                       | VOID_TYPE
                       | INT_TYPE
                       | FLOAT_TYPE
                       | CHAR_TYPE
                       | BOOL_TYPE
                       | FUNCTION_TYPE

tags ::= tag-vector | tag
private tag-vector ::= LBRACE <<list symbol>> RBRACE { pin = 1 }
private tag ::= (symbol | builtin_type) COLON { pin = "COLON" }

struct_literal ::= LBRACE <<list_maybe_trailing_comma struct_literal_item>> RBRACE
struct_literal_item ::= identifier EQ expr { pin = 2 }  // XXX: be more restrictive?

// NOTE: "float" is only allowed in older versions of the compiler, where it is a native.
func_decl ::= func_decl_type type_expression (identifier | FLOAT_TYPE) param_list SEMICOLON {
  pin = 1
  methods = [
    funcType = "/func_decl_type"
    nameIdentifier = "/identifier"
  ]
}
func_decl_type ::= NATIVE_KEYWORD | FORWARD_KEYWORD

// Statement is only used in handles.inc, and the parser only allows this incantation
using_stmt ::= USING_KEYWORD '__intrinsics__' DOT 'Handle' SEMICOLON

methodmap ::= METHODMAP_KEYWORD identifier (LT identifier)? LBRACE methodmap_entry* RBRACE SEMICOLON? {
  pin = 1
  methods = [
    nameIdentifier="/identifier[0]"
    extendsType="/identifier[1]"
  ]
}
private methodmap_entry ::= methodmap_method | methodmap_prop

methodmap_method ::= methodmap_method_decl | methodmap_method_impl
private methodmap_method_decl ::= PUBLIC_KEYWORD STATIC_KEYWORD? NATIVE_KEYWORD? methodmap_method_ident param_list SEMICOLON { pin = 7 }
private methodmap_method_ident ::= type_expression identifier | identifier | TILDE identifier
private methodmap_method_impl ::= PUBLIC_KEYWORD type_expression identifier param_list stmt

methodmap_prop ::= PROPERTY_KEYWORD type_expression identifier LBRACE prop_decl* RBRACE { pin = 1 }
prop_decl ::= prop_method_decl | prop_method_impl
accessor_name ::= 'get' | 'set'
private prop_method_decl ::= PUBLIC_KEYWORD NATIVE_KEYWORD? accessor_name param_list SEMICOLON
private prop_method_impl ::= PUBLIC_KEYWORD accessor_name param_list stmt

typedef ::= TYPEDEF_KEYWORD identifier EQ typedef_def { pin = 1 }
typedef_def ::= FUNCTION_TYPE type_expression typedef_param_list SEMICOLON { pin = 1 }
private typedef_param_list ::= LPAREN <<list_maybe_trailing_comma typedef_param_decl>>? RPAREN { pin = 1 }
typedef_param_decl ::= CONST_KEYWORD? type_expression AND? identifier old_dims?{ pin = 1 }

typeset ::= TYPESET_KEYWORD identifier LBRACE typedef_def+ RBRACE { pin = 1 }

struct_decl ::= STRUCT_KEYWORD identifier LBRACE struct_field* RBRACE { pin = 1 }
struct_field ::= PUBLIC_KEYWORD CONST_KEYWORD? type_expression identifier SEMICOLON { pin = 1 }

enum_struct_decl ::= ENUM_KEYWORD STRUCT_KEYWORD identifier LBRACE /* newline */ enum_struct_item* RBRACE
private enum_struct_item ::= enum_struct_field | enum_struct_method
enum_struct_field ::= type_expression identifier old_dims? SEMICOLON
enum_struct_method ::= type_expression identifier param_list stmt SEMICOLON? { pin = 3 }

func ::= func_storage_class? func_type_ident param_list stmt
private func_type_ident ::= func_type_ident_new | func_type_ident_old
private func_type_ident_new ::= type_expression identifier
private func_type_ident_old ::= tags? identifier
private func_storage_class ::= PUBLIC_KEYWORD
                             | STOCK_KEYWORD STATIC_KEYWORD?
                             | STATIC_KEYWORD STOCK_KEYWORD?

param_list ::= LPAREN <<list param_decl>>? RPAREN { pin = 1 }
param_decl ::= param_decl_new | param_decl_old
private param_decl_old ::= CONST_KEYWORD? AND? tags? identifier old_dims? (EQ expr)?
private param_decl_new ::= CONST_KEYWORD? type_expression AND? ((identifier old_dims? (EQ expr)?) | ELLIPSIS)

private stmt ::= compound_stmt
               | single_stmt

private single_stmt ::= simple_stmt
                      | delete_stmt
                      | if_stmt
                      | switch_stmt
                      | for_loop
                      | while_loop
                      | do_while_loop
                      | continue_stmt
                      | break_stmt
                      | return_stmt
                      | enum_decl
private compound_stmt ::= LBRACE stmt* RBRACE { pin = 1; }

private simple_stmt ::= simple_expression SEMICOLON { pin = 1 }
private simple_expression ::= local_decl | expr { recoverWhile = simple_expression_recover }
private simple_expression_recover ::= !SEMICOLON

delete_stmt ::= DELETE_KEYWORD primary_expr SEMICOLON { pin = 1 }

if_stmt ::= IF_KEYWORD if_cond stmt (ELSE_KEYWORD stmt)? { pin = 1 }
private if_cond ::= LPAREN expr RPAREN { pin = 1 }

switch_stmt ::= SWITCH_KEYWORD LPAREN expr RPAREN LBRACE (switch_case | switch_default)* RBRACE { pin = 1 }
switch_case ::= CASE_KEYWORD <<list expr>> COLON stmt { pin = 1 }
switch_default ::= DEFAULT_KEYWORD COLON stmt { pin = 1 }

for_loop ::= FOR_KEYWORD LPAREN for_init? SEMICOLON for_condition? SEMICOLON for_iteration? RPAREN stmt { pin = 1 }
private for_init ::= <<list simple_expression>>
private for_condition ::= expr
private for_iteration ::= expr

while_loop ::= WHILE_KEYWORD LPAREN while_condition RPAREN stmt { pin = 1 }
private while_condition ::= expr
do_while_loop ::= DO_KEYWORD stmt WHILE_KEYWORD LPAREN while_condition RPAREN SEMICOLON { pin = 1 }

continue_stmt ::= CONTINUE_KEYWORD SEMICOLON { pin = 1 }
break_stmt ::= BREAK_KEYWORD SEMICOLON { pin = 1 }

return_stmt ::= RETURN_KEYWORD expr? SEMICOLON { pin = 1 }

enum_decl ::= ENUM_KEYWORD (tag | identifier)? LBRACE <<list_maybe_trailing_comma enum_item>>? RBRACE { pin = 1 }
enum_item ::= identifier (EQ expr)? { pin = 1 }

local_decl ::= local_decl_old | local_decl_new
private local_decl_new ::= (STATIC_KEYWORD | CONST_KEYWORD)? type_expression <<list local_decl_item>>
private local_decl_old ::= (NEW_KEYWORD | DECL_KEYWORD) tags? <<list local_decl_item>> { pin = 1 }
local_decl_item ::= identifier old_dims? local_initializer? { pin = 1 }
private local_initializer ::= EQ expr { pin = 1 }

expr ::= assignment_expr
       | ternary_expr
       | logical_or_expr
       | logical_and_expr
       | inclusive_or_expr
       | exclusive_or_expr
       | and_expr
       | equality_expr
       | relational_expr
       | shift_expr
       | additive_expr
       | multiplicative_expr
       | unary_group
       | postfix_group
       | primary_expr
       | paren_expr
       | literal
       { extraRoot = true }

ternary_expr ::= expr QUEST expr COLON expr { pin = "QUEST" }

assignment_expr ::= primary_expr assignment_op expr {
  pin = 2
  rightAssociative = true
}

assignment_op ::= EQ
                | PLUSEQ
                | MINUSEQ
                | ASTERISKEQ
                | DIVEQ
                | ANDEQ
                | OREQ
                | XOREQ
                | PERCEQ
                | LTLTEQ
                | GTGTEQ
                { name = "operator" }

relational_op ::= LT
                | GT
                | LE
                | GE
                { name = "operator" }

private postfix_group ::= subscript_expr
                        | post_increment_expr
                        | post_decrement_expr

private unary_group ::= pre_increment_expr
                      | pre_decrement_expr
                      | ref_expr
                      | deref_expr
                      | positive_expr
                      | negative_expr
                      | not_expr
                      | logical_not_expr
                      | sizeof_expr
                      | view_as_expr
                      | new_expr
                      | call_expr

logical_or_expr ::= expr OROR expr { pin = 2 }
logical_and_expr ::= expr ANDAND expr { pin = 2 }
inclusive_or_expr ::= expr XOR expr { pin = 2 }
exclusive_or_expr ::= expr OR expr { pin = 2 }
and_expr ::= expr AND expr { pin = 2 }
equality_expr ::= expr (EQEQ | NE) expr { pin = 2 }
relational_expr ::= expr relational_op expr { pin = 2 }
shift_expr ::= expr (LTLT | GTGT) expr { pin = 2 }
additive_expr ::= expr (PLUS | MINUS) expr { pin = 2 }
multiplicative_expr ::= expr (ASTERISK | DIV | PERC) expr { pin = 2 }

pre_increment_expr ::= PLUSPLUS expr { pin = 1 }
pre_decrement_expr ::= MINUSMINUS expr { pin = 1 }
ref_expr ::= AND expr { pin = 1 }
deref_expr ::= ASTERISK expr { pin = 1 }
positive_expr ::= PLUS expr { pin = 1 }
negative_expr ::= MINUS expr { pin = 1 }
not_expr ::= TILDE expr { pin = 1 }
logical_not_expr ::= EXCL expr { pin = 1 }
sizeof_expr ::= SIZEOF_KEYWORD expr { pin = 1 }
view_as_expr ::= VIEW_AS_KEYWORD LT type_expression GT paren_expr { pin = 1 }
new_expr ::= NEW_KEYWORD (type def_dims | call_expr) { pin = 1 }

call_expr ::= (primary_expr | FLOAT_TYPE) LPAREN <<list call_arg>>? RPAREN { pin = 2 }
call_arg ::= call_arg_value | call_kwarg
call_kwarg ::= DOT identifier EQ call_arg_value { pin = 1 }
private call_arg_value ::= UNDERSCORE | expr

post_increment_expr ::= expr PLUSPLUS { pin = 2 }
post_decrement_expr ::= expr MINUSMINUS { pin = 2 }
subscript_expr ::= expr subscript
// XXX: lack of expression used for sizeof expr. is there a better way?
private subscript ::= LBRACKET expr? RBRACKET { pin = 1 }

primary_expr ::= identifier primary_expr_subscripts? primary_expr_prop? {
//  recoverWhile = primary_expr_recover
}
private primary_expr_subscripts ::= subscript+
private primary_expr_prop ::= (DOT primary_expr)+
identifier ::= symbol {
  mixin = "org.idea_sp.psi.ext.SourcePawnIdentifierMixin"
}

// XXX: ugh, tag expressions really throw a wrench into case stmts.
//      Does the compiler support tag exprs in cases?
// NO! "expression with tag override must appear between parentheses"
tag_expr ::= tag expr { pin = 1 }

paren_expr ::= LPAREN (expr | tag_expr) RPAREN { pin = 1 }

literal ::= NULL_KEYWORD
          | boolean
          | number
          | string_literal
          | character_literal
          | array_literal
          { extends = expr }

boolean ::= TRUE_KEYWORD | FALSE_KEYWORD

number ::= integer
         | rational
         { extends = expr }

rational ::= float_literal { extends = expr }

integer ::= integer_literal
          | binary_literal
          | hex_literal
          { extends = expr }

array_literal ::= LBRACE <<list expr>> (COMMA ELLIPSIS)? RBRACE
