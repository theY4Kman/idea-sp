/* The following code was generated by JFlex 1.7.0-1 tweaked for IntelliJ platform */

package org.idea_sp;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static org.idea_sp.psi.SourcePawnTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-1
 * from the specification file <tt>D:/Users/Matthew/IdeaProjects/CustomLang/idea-sp/src/main/grammar/SourcePawn.flex</tt>
 */
public class _SourcePawnLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 3872 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>12]<<6)|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\7\3\1\4\4\3\1\5\1\6\1\7\4\3\1\10\6\3\1\11\1\12\361\3");

  /* The ZZ_CMAP_Y table has 704 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\26\3\1\4\1\3\1\5\3\3\1\6\5\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3"+
    "\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\10\1\3\1\10\1\4\4\3\1\6"+
    "\1\10\34\3\1\4\1\10\4\3\1\11\1\3\1\10\2\3\1\12\2\3\1\10\1\5\2\3\1\12\16\3"+
    "\1\13\227\3\1\4\12\3\1\10\1\6\2\3\1\14\1\3\1\10\5\3\1\5\114\3\1\10\25\3\1"+
    "\4\56\3\1\7\1\3\1\5\1\15\2\3\1\10\3\3\1\5\5\3\1\10\1\3\1\10\5\3\1\10\1\3\1"+
    "\6\1\5\6\3\1\4\15\3\1\10\67\3\1\4\3\3\1\10\61\3\1\16\105\3\1\10\32\3");

  /* The ZZ_CMAP_A table has 960 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\1\2\1\6\1\7\1\1\22\0\1\3\1\52\1\44\1\10\1\0\1\61\1\74\1\46\1\62"+
    "\1\63\1\5\1\56\1\71\1\32\1\35\1\4\1\36\1\43\10\33\1\55\1\70\1\72\1\51\1\73"+
    "\1\54\1\47\6\40\24\50\1\66\1\45\1\67\1\60\1\41\1\0\1\11\1\42\1\26\1\16\1\13"+
    "\1\17\1\27\1\77\1\20\1\50\1\75\1\22\1\30\1\21\1\25\1\23\1\50\1\14\1\12\1\15"+
    "\1\24\1\101\1\76\1\37\1\31\1\100\1\64\1\57\1\65\1\53\6\0\1\6\232\0\12\34\106"+
    "\0\12\34\6\0\12\34\134\0\12\34\40\0\12\34\54\0\12\34\60\0\12\34\6\0\12\34"+
    "\116\0\2\6\46\0\12\34\26\0\12\34\74\0\12\34\16\0\62\34");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\1\16\5\1\6"+
    "\1\7\1\10\1\7\1\1\1\5\2\1\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\5\1\35\1\0\1\36\1\37\12\0"+
    "\13\5\1\40\1\5\1\41\7\5\1\42\1\43\4\0"+
    "\1\5\1\0\1\44\3\0\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\0\1\57"+
    "\1\60\1\5\11\0\1\61\4\0\17\5\1\62\1\5"+
    "\1\63\5\5\1\64\1\65\1\66\1\67\1\5\1\44"+
    "\2\70\1\71\1\72\1\5\1\73\11\0\7\5\1\74"+
    "\1\75\1\76\1\77\4\5\1\100\4\5\1\101\2\5"+
    "\1\102\1\0\2\5\10\0\1\5\1\103\2\5\1\104"+
    "\1\5\1\105\2\5\1\106\6\5\1\107\1\5\1\0"+
    "\1\64\1\110\1\111\5\0\1\112\1\113\1\114\1\115"+
    "\1\116\1\117\3\5\1\120\1\121\2\5\2\0\1\122"+
    "\1\123\1\124\2\5\1\125\1\126";

  private static int [] zzUnpackAction() {
    int [] result = new int[252];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\204\0\306\0\u0108\0\u014a\0\u018c\0\u01ce"+
    "\0\u0210\0\u0252\0\u0294\0\u02d6\0\u0318\0\u035a\0\u039c\0\u03de"+
    "\0\u0420\0\u0462\0\u04a4\0\u04e6\0\u0528\0\u056a\0\u05ac\0\u05ee"+
    "\0\u03de\0\u0630\0\u0672\0\u06b4\0\u06f6\0\u0738\0\102\0\102"+
    "\0\102\0\u077a\0\u07bc\0\u07fe\0\u0840\0\102\0\102\0\102"+
    "\0\102\0\102\0\102\0\102\0\102\0\u0882\0\u08c4\0\u0906"+
    "\0\u0948\0\u098a\0\u09cc\0\102\0\102\0\u0a0e\0\u0a50\0\u0a92"+
    "\0\u0ad4\0\u0b16\0\u0b58\0\u0b9a\0\u0bdc\0\u0c1e\0\u0c60\0\u0ca2"+
    "\0\u0ce4\0\u0d26\0\u0d68\0\u0daa\0\u0dec\0\u0e2e\0\u0e70\0\u0eb2"+
    "\0\u0ef4\0\u0f36\0\u03de\0\u0f78\0\u03de\0\u0fba\0\u0ffc\0\u103e"+
    "\0\u1080\0\u10c2\0\u1104\0\u1146\0\102\0\102\0\u1188\0\u11ca"+
    "\0\u120c\0\u124e\0\u1290\0\u0672\0\102\0\u12d2\0\u1314\0\u1356"+
    "\0\102\0\102\0\102\0\102\0\102\0\102\0\102\0\102"+
    "\0\102\0\u1398\0\u13da\0\102\0\102\0\u141c\0\u145e\0\u14a0"+
    "\0\u14e2\0\u1524\0\u1566\0\u15a8\0\u15ea\0\u162c\0\u166e\0\u16b0"+
    "\0\u16f2\0\u1734\0\u1776\0\u17b8\0\u17fa\0\u183c\0\u187e\0\u18c0"+
    "\0\u1902\0\u1944\0\u1986\0\u19c8\0\u1a0a\0\u1a4c\0\u1a8e\0\u1ad0"+
    "\0\u1b12\0\u1b54\0\u1b96\0\u1bd8\0\u1c1a\0\u03de\0\u1c5c\0\u1c9e"+
    "\0\u1ce0\0\u1d22\0\u1d64\0\u1da6\0\102\0\u120c\0\u124e\0\u1de8"+
    "\0\u0672\0\102\0\u1314\0\102\0\102\0\u1e2a\0\u09cc\0\u1e6c"+
    "\0\u1eae\0\u1ef0\0\u1f32\0\u1f74\0\u1fb6\0\u1ff8\0\u203a\0\u207c"+
    "\0\u20be\0\u2100\0\u2142\0\u2184\0\u21c6\0\u2208\0\u224a\0\u03de"+
    "\0\u03de\0\u03de\0\u03de\0\u228c\0\u22ce\0\u2310\0\u2352\0\u03de"+
    "\0\u2394\0\u23d6\0\u2418\0\u245a\0\u03de\0\u249c\0\u24de\0\u03de"+
    "\0\u2520\0\u2562\0\u25a4\0\u25e6\0\u2628\0\u266a\0\u26ac\0\u26ee"+
    "\0\u2730\0\u2772\0\u27b4\0\u27f6\0\u03de\0\u2838\0\u287a\0\u03de"+
    "\0\u28bc\0\u03de\0\u28fe\0\u2940\0\u03de\0\u2982\0\u29c4\0\u2a06"+
    "\0\u2a48\0\u2a8a\0\u2acc\0\u03de\0\u2b0e\0\u2b50\0\u2b50\0\u03de"+
    "\0\u03de\0\u2b92\0\u2bd4\0\u2c16\0\u2c58\0\u2c9a\0\u03de\0\u03de"+
    "\0\u03de\0\u03de\0\u03de\0\u03de\0\u2cdc\0\u2d1e\0\u2d60\0\u03de"+
    "\0\u03de\0\u2da2\0\u2de4\0\u2e26\0\u2e68\0\u03de\0\u03de\0\u03de"+
    "\0\u2eaa\0\u2eec\0\u03de\0\u03de";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[252];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\5\1\2\1\3\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\20\1\22\1\23\1\24\2\20\1\25"+
    "\1\26\1\2\1\27\1\30\2\20\1\31\1\32\1\26"+
    "\1\33\1\2\1\34\1\31\1\20\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\20\1\61\3\20\103\0\3\3\3\0\1\3"+
    "\76\0\1\62\1\63\43\0\1\64\101\0\1\65\41\0"+
    "\1\66\1\67\1\70\1\0\1\71\1\72\1\73\1\74"+
    "\1\0\1\75\1\76\1\77\66\0\1\20\1\100\17\20"+
    "\1\0\1\20\2\0\6\20\3\0\2\20\24\0\5\20"+
    "\11\0\4\20\1\101\2\20\1\102\1\20\1\103\7\20"+
    "\1\0\1\20\2\0\6\20\3\0\2\20\24\0\1\20"+
    "\1\104\3\20\11\0\10\20\1\105\1\106\7\20\1\0"+
    "\1\20\2\0\1\20\1\107\4\20\3\0\2\20\24\0"+
    "\5\20\11\0\2\20\1\110\16\20\1\0\1\20\2\0"+
    "\6\20\3\0\2\20\24\0\5\20\11\0\1\111\20\20"+
    "\1\0\1\20\2\0\6\20\3\0\2\20\24\0\5\20"+
    "\11\0\2\20\1\112\11\20\1\113\4\20\1\0\1\20"+
    "\2\0\6\20\3\0\2\20\24\0\5\20\11\0\14\20"+
    "\1\114\4\20\1\0\1\20\2\0\6\20\3\0\2\20"+
    "\24\0\5\20\11\0\6\20\1\115\12\20\1\0\1\20"+
    "\2\0\6\20\3\0\2\20\24\0\5\20\11\0\1\116"+
    "\1\20\1\117\16\20\1\0\1\20\2\0\6\20\3\0"+
    "\2\20\24\0\5\20\11\0\21\20\1\0\1\20\2\0"+
    "\6\20\3\0\2\20\24\0\5\20\11\0\13\20\1\120"+
    "\5\20\1\0\1\20\2\0\6\20\3\0\2\20\24\0"+
    "\5\20\11\0\12\20\1\121\6\20\1\0\1\20\2\0"+
    "\6\20\3\0\2\20\24\0\5\20\11\0\1\122\13\20"+
    "\1\123\4\20\1\0\1\20\2\0\6\20\3\0\2\20"+
    "\24\0\5\20\11\0\14\20\1\124\4\20\1\0\1\20"+
    "\2\0\6\20\3\0\2\20\24\0\5\20\32\0\1\125"+
    "\1\26\2\0\1\30\4\0\1\26\5\0\1\126\63\0"+
    "\2\26\1\127\1\26\2\0\1\26\1\0\1\26\73\0"+
    "\1\130\77\0\2\26\1\127\1\26\1\131\1\0\1\26"+
    "\1\132\1\26\47\0\3\20\1\133\15\20\1\0\1\20"+
    "\2\0\6\20\3\0\2\20\24\0\5\20\44\134\1\135"+
    "\1\136\34\134\44\137\1\0\1\140\34\137\51\0\1\141"+
    "\101\0\1\142\63\0\1\26\2\0\1\30\4\0\1\26"+
    "\5\0\1\143\4\0\1\144\74\0\1\145\5\0\1\146"+
    "\73\0\1\147\101\0\1\150\101\0\1\151\20\0\1\152"+
    "\102\0\1\153\57\0\1\154\22\0\1\155\16\0\21\20"+
    "\1\0\1\20\2\0\6\20\3\0\2\20\24\0\2\20"+
    "\1\156\2\20\1\62\2\0\77\62\1\63\1\0\3\63"+
    "\1\157\2\0\72\63\12\0\1\160\102\0\1\161\102\0"+
    "\1\162\4\0\1\163\1\164\73\0\1\165\100\0\1\166"+
    "\106\0\1\167\100\0\1\170\1\0\1\171\100\0\1\172"+
    "\75\0\1\173\106\0\1\174\71\0\1\20\1\175\17\20"+
    "\1\0\1\20\2\0\6\20\3\0\2\20\24\0\5\20"+
    "\11\0\1\176\2\20\1\177\10\20\1\200\4\20\1\0"+
    "\1\20\2\0\6\20\3\0\2\20\24\0\5\20\11\0"+
    "\21\20\1\0\1\20\2\0\6\20\3\0\2\20\24\0"+
    "\3\20\1\201\1\20\11\0\2\20\1\202\16\20\1\0"+
    "\1\20\2\0\6\20\3\0\2\20\24\0\5\20\11\0"+
    "\7\20\1\203\11\20\1\0\1\20\2\0\6\20\3\0"+
    "\2\20\24\0\5\20\11\0\13\20\1\204\5\20\1\0"+
    "\1\20\2\0\6\20\3\0\2\20\24\0\5\20\11\0"+
    "\1\20\1\205\17\20\1\0\1\20\2\0\6\20\3\0"+
    "\2\20\24\0\5\20\11\0\7\20\1\206\2\20\1\207"+
    "\6\20\1\0\1\20\2\0\6\20\3\0\2\20\24\0"+
    "\5\20\11\0\4\20\1\210\14\20\1\0\1\20\2\0"+
    "\6\20\3\0\2\20\24\0\5\20\11\0\16\20\1\211"+
    "\2\20\1\0\1\20\2\0\6\20\3\0\2\20\24\0"+
    "\5\20\11\0\6\20\1\212\6\20\1\213\3\20\1\0"+
    "\1\20\2\0\6\20\3\0\2\20\24\0\5\20\11\0"+
    "\3\20\1\214\15\20\1\0\1\20\2\0\6\20\3\0"+
    "\2\20\24\0\5\20\11\0\4\20\1\215\14\20\1\0"+
    "\1\20\2\0\6\20\3\0\2\20\24\0\5\20\11\0"+
    "\21\20\1\0\1\20\2\0\6\20\3\0\2\20\24\0"+
    "\1\20\1\216\3\20\11\0\21\20\1\0\1\20\2\0"+
    "\4\20\1\217\1\20\3\0\2\20\24\0\5\20\11\0"+
    "\2\20\1\220\16\20\1\0\1\20\2\0\6\20\3\0"+
    "\2\20\24\0\5\20\11\0\1\20\1\221\17\20\1\0"+
    "\1\20\2\0\6\20\3\0\2\20\24\0\5\20\11\0"+
    "\10\20\1\222\10\20\1\0\1\20\2\0\6\20\3\0"+
    "\2\20\24\0\5\20\11\0\4\20\1\223\14\20\1\0"+
    "\1\20\2\0\6\20\3\0\2\20\24\0\5\20\33\0"+
    "\1\224\2\0\1\224\4\0\1\224\73\0\1\225\55\0"+
    "\1\226\1\0\1\226\2\0\2\226\6\0\1\226\4\0"+
    "\1\226\2\0\1\226\1\0\4\226\74\0\1\227\2\0"+
    "\1\227\1\0\1\227\47\0\2\20\1\230\16\20\1\0"+
    "\1\20\2\0\6\20\3\0\2\20\24\0\5\20\44\134"+
    "\1\231\1\136\34\134\46\0\1\232\33\0\1\137\2\0"+
    "\3\137\2\0\36\137\1\233\33\137\51\0\1\234\101\0"+
    "\1\235\41\0\7\20\1\236\11\20\1\0\1\20\2\0"+
    "\6\20\3\0\2\20\24\0\5\20\1\63\1\0\2\63"+
    "\1\237\1\157\2\0\72\63\12\0\1\240\115\0\1\241"+
    "\67\0\1\242\103\0\1\243\75\0\1\244\120\0\1\245"+
    "\67\0\1\75\104\0\1\244\57\0\1\170\2\0\77\170"+
    "\26\0\1\246\74\0\1\244\71\0\1\247\106\0\1\250"+
    "\74\0\2\20\1\251\16\20\1\0\1\20\2\0\6\20"+
    "\3\0\2\20\24\0\5\20\11\0\4\20\1\252\14\20"+
    "\1\0\1\20\2\0\6\20\3\0\2\20\24\0\5\20"+
    "\11\0\13\20\1\253\5\20\1\0\1\20\2\0\6\20"+
    "\3\0\2\20\24\0\5\20\11\0\15\20\1\254\3\20"+
    "\1\0\1\20\2\0\6\20\3\0\2\20\24\0\5\20"+
    "\11\0\2\20\1\255\16\20\1\0\1\20\2\0\6\20"+
    "\3\0\2\20\24\0\5\20\11\0\2\20\1\256\16\20"+
    "\1\0\1\20\2\0\6\20\3\0\2\20\24\0\5\20"+
    "\11\0\4\20\1\257\14\20\1\0\1\20\2\0\6\20"+
    "\3\0\2\20\24\0\5\20\11\0\17\20\1\260\1\20"+
    "\1\0\1\20\2\0\6\20\3\0\2\20\24\0\5\20"+
    "\11\0\2\20\1\261\16\20\1\0\1\20\2\0\6\20"+
    "\3\0\2\20\24\0\5\20\11\0\4\20\1\262\14\20"+
    "\1\0\1\20\2\0\6\20\3\0\2\20\24\0\5\20"+
    "\11\0\3\20\1\263\15\20\1\0\1\20\2\0\6\20"+
    "\3\0\2\20\24\0\5\20\11\0\13\20\1\264\5\20"+
    "\1\0\1\20\2\0\6\20\3\0\2\20\24\0\5\20"+
    "\11\0\14\20\1\265\4\20\1\0\1\20\2\0\6\20"+
    "\3\0\2\20\24\0\5\20\11\0\1\266\6\20\1\267"+
    "\11\20\1\0\1\20\2\0\6\20\3\0\2\20\24\0"+
    "\5\20\11\0\11\20\1\270\7\20\1\0\1\20\2\0"+
    "\6\20\3\0\2\20\24\0\5\20\11\0\21\20\1\0"+
    "\1\20\2\0\6\20\3\0\2\20\24\0\1\20\1\271"+
    "\3\20\11\0\7\20\1\272\11\20\1\0\1\20\2\0"+
    "\6\20\3\0\2\20\24\0\5\20\11\0\11\20\1\273"+
    "\7\20\1\0\1\20\2\0\6\20\3\0\2\20\24\0"+
    "\5\20\11\0\3\20\1\274\15\20\1\0\1\20\2\0"+
    "\6\20\3\0\2\20\24\0\5\20\11\0\2\20\1\275"+
    "\16\20\1\0\1\20\2\0\6\20\3\0\2\20\24\0"+
    "\5\20\11\0\1\20\1\276\2\20\1\277\14\20\1\0"+
    "\1\20\2\0\6\20\3\0\2\20\24\0\5\20\11\0"+
    "\14\20\1\300\4\20\1\0\1\20\2\0\6\20\3\0"+
    "\2\20\24\0\5\20\13\0\1\301\17\0\2\224\1\0"+
    "\1\224\2\0\1\224\1\0\1\224\47\0\1\302\20\20"+
    "\1\0\1\20\2\0\6\20\3\0\2\20\24\0\5\20"+
    "\11\0\11\20\1\303\7\20\1\0\1\20\2\0\6\20"+
    "\3\0\2\20\24\0\5\20\13\0\1\304\103\0\1\305"+
    "\111\0\1\306\74\0\1\307\74\0\1\170\106\0\1\310"+
    "\103\0\1\311\106\0\1\312\65\0\1\313\77\0\3\20"+
    "\1\314\15\20\1\0\1\20\2\0\6\20\3\0\2\20"+
    "\24\0\5\20\11\0\2\20\1\315\4\20\1\316\11\20"+
    "\1\0\1\20\2\0\6\20\3\0\2\20\24\0\5\20"+
    "\11\0\15\20\1\317\3\20\1\0\1\20\2\0\6\20"+
    "\3\0\2\20\24\0\5\20\11\0\21\20\1\0\1\20"+
    "\2\0\6\20\3\0\2\20\24\0\1\320\4\20\11\0"+
    "\14\20\1\321\4\20\1\0\1\20\2\0\6\20\3\0"+
    "\2\20\24\0\5\20\11\0\12\20\1\322\6\20\1\0"+
    "\1\20\2\0\6\20\3\0\2\20\24\0\5\20\11\0"+
    "\15\20\1\323\3\20\1\0\1\20\2\0\6\20\3\0"+
    "\2\20\24\0\5\20\11\0\3\20\1\324\15\20\1\0"+
    "\1\20\2\0\6\20\3\0\2\20\24\0\5\20\11\0"+
    "\6\20\1\325\12\20\1\0\1\20\2\0\6\20\3\0"+
    "\2\20\24\0\5\20\11\0\13\20\1\326\5\20\1\0"+
    "\1\20\2\0\6\20\3\0\2\20\24\0\5\20\11\0"+
    "\10\20\1\327\10\20\1\0\1\20\2\0\6\20\3\0"+
    "\2\20\24\0\5\20\11\0\1\330\20\20\1\0\1\20"+
    "\2\0\6\20\3\0\2\20\24\0\5\20\11\0\21\20"+
    "\1\0\1\20\2\0\6\20\3\0\2\20\24\0\4\20"+
    "\1\331\11\0\7\20\1\332\11\20\1\0\1\20\2\0"+
    "\6\20\3\0\2\20\24\0\5\20\11\0\1\333\20\20"+
    "\1\0\1\20\2\0\6\20\3\0\2\20\24\0\5\20"+
    "\11\0\4\20\1\334\14\20\1\0\1\20\2\0\6\20"+
    "\3\0\2\20\24\0\5\20\11\0\7\20\1\335\11\20"+
    "\1\0\1\20\2\0\6\20\3\0\2\20\24\0\5\20"+
    "\32\0\1\336\1\337\2\0\1\337\4\0\1\337\12\0"+
    "\1\336\34\0\21\20\1\0\1\20\2\0\6\20\3\0"+
    "\2\20\24\0\1\340\4\20\11\0\2\20\1\341\16\20"+
    "\1\0\1\20\2\0\6\20\3\0\2\20\24\0\5\20"+
    "\14\0\1\342\105\0\1\343\75\0\1\170\104\0\1\170"+
    "\1\0\1\344\101\0\1\171\104\0\1\345\105\0\1\346"+
    "\70\0\1\170\73\0\4\20\1\347\14\20\1\0\1\20"+
    "\2\0\6\20\3\0\2\20\24\0\5\20\11\0\15\20"+
    "\1\350\3\20\1\0\1\20\2\0\6\20\3\0\2\20"+
    "\24\0\5\20\11\0\4\20\1\351\14\20\1\0\1\20"+
    "\2\0\6\20\3\0\2\20\24\0\5\20\11\0\6\20"+
    "\1\352\12\20\1\0\1\20\2\0\6\20\3\0\2\20"+
    "\24\0\5\20\11\0\21\20\1\0\1\20\2\0\6\20"+
    "\3\0\2\20\24\0\2\20\1\353\2\20\11\0\10\20"+
    "\1\354\10\20\1\0\1\20\2\0\6\20\3\0\2\20"+
    "\24\0\5\20\11\0\11\20\1\355\7\20\1\0\1\20"+
    "\2\0\6\20\3\0\2\20\24\0\5\20\11\0\2\20"+
    "\1\356\16\20\1\0\1\20\2\0\6\20\3\0\2\20"+
    "\24\0\5\20\11\0\3\20\1\357\15\20\1\0\1\20"+
    "\2\0\6\20\3\0\2\20\24\0\5\20\11\0\2\20"+
    "\1\360\16\20\1\0\1\20\2\0\6\20\3\0\2\20"+
    "\24\0\5\20\11\0\15\20\1\361\3\20\1\0\1\20"+
    "\2\0\6\20\3\0\2\20\24\0\5\20\11\0\4\20"+
    "\1\362\14\20\1\0\1\20\2\0\6\20\3\0\2\20"+
    "\24\0\5\20\11\0\10\20\1\363\10\20\1\0\1\20"+
    "\2\0\6\20\3\0\2\20\24\0\5\20\33\0\1\337"+
    "\2\0\1\337\4\0\1\337\53\0\1\170\111\0\1\364"+
    "\77\0\1\365\74\0\1\244\74\0\1\170\101\0\4\20"+
    "\1\366\14\20\1\0\1\20\2\0\6\20\3\0\2\20"+
    "\24\0\5\20\11\0\5\20\1\367\13\20\1\0\1\20"+
    "\2\0\6\20\3\0\2\20\24\0\5\20\11\0\5\20"+
    "\1\370\13\20\1\0\1\20\2\0\6\20\3\0\2\20"+
    "\24\0\5\20\11\0\14\20\1\371\4\20\1\0\1\20"+
    "\2\0\6\20\3\0\2\20\24\0\5\20\11\0\13\20"+
    "\1\372\5\20\1\0\1\20\2\0\6\20\3\0\2\20"+
    "\24\0\5\20\21\0\1\170\104\0\1\342\66\0\3\20"+
    "\1\373\15\20\1\0\1\20\2\0\6\20\3\0\2\20"+
    "\24\0\5\20\11\0\2\20\1\374\16\20\1\0\1\20"+
    "\2\0\6\20\3\0\2\20\24\0\5\20";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12078];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\34\1\3\11\4\1\10\11\5\1\1\0"+
    "\2\11\12\0\25\1\2\11\4\0\1\1\1\0\1\11"+
    "\3\0\11\11\1\1\1\0\2\11\1\1\11\0\1\1"+
    "\4\0\30\1\1\11\4\1\1\11\1\1\2\11\2\1"+
    "\11\0\30\1\1\0\2\1\10\0\22\1\1\0\3\1"+
    "\5\0\15\1\2\0\7\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[252];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _SourcePawnLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _SourcePawnLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 87: break;
          case 2: 
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            } 
            // fall through
          case 88: break;
          case 3: 
            { return DIV;
            } 
            // fall through
          case 89: break;
          case 4: 
            { return ASTERISK;
            } 
            // fall through
          case 90: break;
          case 5: 
            { return SYMBOL;
            } 
            // fall through
          case 91: break;
          case 6: 
            { return MINUS;
            } 
            // fall through
          case 92: break;
          case 7: 
            { return INTEGER_LITERAL;
            } 
            // fall through
          case 93: break;
          case 8: 
            { return DOT;
            } 
            // fall through
          case 94: break;
          case 9: 
            { return EQ;
            } 
            // fall through
          case 95: break;
          case 10: 
            { return EXCL;
            } 
            // fall through
          case 96: break;
          case 11: 
            { return TILDE;
            } 
            // fall through
          case 97: break;
          case 12: 
            { return QUEST;
            } 
            // fall through
          case 98: break;
          case 13: 
            { return COLON;
            } 
            // fall through
          case 99: break;
          case 14: 
            { return PLUS;
            } 
            // fall through
          case 100: break;
          case 15: 
            { return OR;
            } 
            // fall through
          case 101: break;
          case 16: 
            { return XOR;
            } 
            // fall through
          case 102: break;
          case 17: 
            { return PERC;
            } 
            // fall through
          case 103: break;
          case 18: 
            { return LPAREN;
            } 
            // fall through
          case 104: break;
          case 19: 
            { return RPAREN;
            } 
            // fall through
          case 105: break;
          case 20: 
            { return LBRACE;
            } 
            // fall through
          case 106: break;
          case 21: 
            { return RBRACE;
            } 
            // fall through
          case 107: break;
          case 22: 
            { return LBRACKET;
            } 
            // fall through
          case 108: break;
          case 23: 
            { return RBRACKET;
            } 
            // fall through
          case 109: break;
          case 24: 
            { return SEMICOLON;
            } 
            // fall through
          case 110: break;
          case 25: 
            { return COMMA;
            } 
            // fall through
          case 111: break;
          case 26: 
            { return LT;
            } 
            // fall through
          case 112: break;
          case 27: 
            { return GT;
            } 
            // fall through
          case 113: break;
          case 28: 
            { return AND;
            } 
            // fall through
          case 114: break;
          case 29: 
            { return LINE_COMMENT;
            } 
            // fall through
          case 115: break;
          case 30: 
            { return DIVEQ;
            } 
            // fall through
          case 116: break;
          case 31: 
            { return ASTERISKEQ;
            } 
            // fall through
          case 117: break;
          case 32: 
            { return DO_KEYWORD;
            } 
            // fall through
          case 118: break;
          case 33: 
            { return IF_KEYWORD;
            } 
            // fall through
          case 119: break;
          case 34: 
            { return MINUSMINUS;
            } 
            // fall through
          case 120: break;
          case 35: 
            { return MINUSEQ;
            } 
            // fall through
          case 121: break;
          case 36: 
            { return STRING_LITERAL;
            } 
            // fall through
          case 122: break;
          case 37: 
            { return EQEQ;
            } 
            // fall through
          case 123: break;
          case 38: 
            { return NE;
            } 
            // fall through
          case 124: break;
          case 39: 
            { return PLUSEQ;
            } 
            // fall through
          case 125: break;
          case 40: 
            { return PLUSPLUS;
            } 
            // fall through
          case 126: break;
          case 41: 
            { return OREQ;
            } 
            // fall through
          case 127: break;
          case 42: 
            { return OROR;
            } 
            // fall through
          case 128: break;
          case 43: 
            { return XOREQ;
            } 
            // fall through
          case 129: break;
          case 44: 
            { return PERCEQ;
            } 
            // fall through
          case 130: break;
          case 45: 
            { return LE;
            } 
            // fall through
          case 131: break;
          case 46: 
            { return LTLT;
            } 
            // fall through
          case 132: break;
          case 47: 
            { return ANDEQ;
            } 
            // fall through
          case 133: break;
          case 48: 
            { return ANDAND;
            } 
            // fall through
          case 134: break;
          case 49: 
            { return PREPROCESSOR_COMMENT;
            } 
            // fall through
          case 135: break;
          case 50: 
            { return FOR_KEYWORD;
            } 
            // fall through
          case 136: break;
          case 51: 
            { return NEW_KEYWORD;
            } 
            // fall through
          case 137: break;
          case 52: 
            { return FLOAT_LITERAL;
            } 
            // fall through
          case 138: break;
          case 53: 
            { return ELLIPSIS;
            } 
            // fall through
          case 139: break;
          case 54: 
            { return HEX_LITERAL;
            } 
            // fall through
          case 140: break;
          case 55: 
            { return BINARY_LITERAL;
            } 
            // fall through
          case 141: break;
          case 56: 
            { return CHARACTER_LITERAL;
            } 
            // fall through
          case 142: break;
          case 57: 
            { return LTLTEQ;
            } 
            // fall through
          case 143: break;
          case 58: 
            { return GTGTEQ;
            } 
            // fall through
          case 144: break;
          case 59: 
            { return BLOCK_COMMENT;
            } 
            // fall through
          case 145: break;
          case 60: 
            { return ENUM_KEYWORD;
            } 
            // fall through
          case 146: break;
          case 61: 
            { return ELSE_KEYWORD;
            } 
            // fall through
          case 147: break;
          case 62: 
            { return EXIT_KEYWORD;
            } 
            // fall through
          case 148: break;
          case 63: 
            { return EXPR;
            } 
            // fall through
          case 149: break;
          case 64: 
            { return DECL_KEYWORD;
            } 
            // fall through
          case 150: break;
          case 65: 
            { return CASE_KEYWORD;
            } 
            // fall through
          case 151: break;
          case 66: 
            { return GOTO_KEYWORD;
            } 
            // fall through
          case 152: break;
          case 67: 
            { return STATE_KEYWORD;
            } 
            // fall through
          case 153: break;
          case 68: 
            { return STOCK_KEYWORD;
            } 
            // fall through
          case 154: break;
          case 69: 
            { return SLEEP_KEYWORD;
            } 
            // fall through
          case 155: break;
          case 70: 
            { return TAGOF_KEYWORD;
            } 
            // fall through
          case 156: break;
          case 71: 
            { return CONST_KEYWORD;
            } 
            // fall through
          case 157: break;
          case 72: 
            { return BREAK_KEYWORD;
            } 
            // fall through
          case 158: break;
          case 73: 
            { return WHILE_KEYWORD;
            } 
            // fall through
          case 159: break;
          case 74: 
            { return ASSERT_KEYWORD;
            } 
            // fall through
          case 160: break;
          case 75: 
            { return STATIC_KEYWORD;
            } 
            // fall through
          case 161: break;
          case 76: 
            { return STRUCT_KEYWORD;
            } 
            // fall through
          case 162: break;
          case 77: 
            { return SIZEOF_KEYWORD;
            } 
            // fall through
          case 163: break;
          case 78: 
            { return SWITCH_KEYWORD;
            } 
            // fall through
          case 164: break;
          case 79: 
            { return RETURN_KEYWORD;
            } 
            // fall through
          case 165: break;
          case 80: 
            { return NATIVE_KEYWORD;
            } 
            // fall through
          case 166: break;
          case 81: 
            { return PUBLIC_KEYWORD;
            } 
            // fall through
          case 167: break;
          case 82: 
            { return DEFAULT_KEYWORD;
            } 
            // fall through
          case 168: break;
          case 83: 
            { return DEFINED_KEYWORD;
            } 
            // fall through
          case 169: break;
          case 84: 
            { return FORWARD_KEYWORD;
            } 
            // fall through
          case 170: break;
          case 85: 
            { return OPERATOR_KEYWORD;
            } 
            // fall through
          case 171: break;
          case 86: 
            { return CONTINUE_KEYWORD;
            } 
            // fall through
          case 172: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
